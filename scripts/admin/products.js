document.addEventListener("DOMContentLoaded", () => {
  const token = localStorage.getItem("token");
  if (!token) return (window.location.href = "/account.html");

  const productTableBody = document.querySelector("#products-table-body");
  const productForm = document.getElementById("product-form");
  const formTitle = document.getElementById("modal-title");
  const submitBtn = document.querySelector(".btn-save");

  if (!productTableBody) console.error("Kh√¥ng t√¨m th·∫•y #products-table-body");
  if (!productForm) console.error("Kh√¥ng t√¨m th·∫•y #product-form");
  if (!formTitle) console.error("Kh√¥ng t√¨m th·∫•y #modal-title");
  if (!submitBtn) console.error("Kh√¥ng t√¨m th·∫•y .btn-save");

  if (!productTableBody || !productForm || !formTitle || !submitBtn) {
    return;
  }

  let isEditing = false;
  let editingProductId = null;

  loadProducts();

  // X·ª≠ l√Ω s·ª± ki·ªán submit c·ªßa form
  productForm.addEventListener("submit", async (e) => {
    e.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa form
    const product = {
      title: productForm["product-name"].value,
      price_origin: parseFloat(productForm["product-price"].value) || 0, 
  sale: parseFloat(productForm["product-sale"].value) || 0, 
      category: productForm["product-category"].value,
      description_product: productForm["product-description"].value,
      image_bg: productForm["product-image-bg"].value,
      imagesDetail: Array.from(productForm["product-images"].files).map(
        (file) => file.name
      ),
    };
  
    try {
      let res;
      if (isEditing) {
        // G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t s·∫£n ph·∫©m
        res = await fetch(`/api/admin/products/${editingProductId}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(product),
        });
      } else {
        // G·ª≠i y√™u c·∫ßu th√™m s·∫£n ph·∫©m m·ªõi
        res = await fetch("/api/admin/products", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(product),
        });
      }
  
      if (!res.ok) throw new Error("L·ªói khi l∆∞u s·∫£n ph·∫©m");
  
      alert(isEditing ? "ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m." : "ƒê√£ th√™m s·∫£n ph·∫©m.");
      closeModal(); // ƒê√≥ng modal sau khi l∆∞u
      loadProducts(); // T·∫£i l·∫°i danh s√°ch s·∫£n ph·∫©m
    } catch (err) {
      console.error(err);
      alert(`ƒê√£ c√≥ l·ªói x·∫£y ra: ${err.message}`);
    }
  });
  // T·∫£i danh s√°ch s·∫£n ph·∫©m v√† danh m·ª•c
  async function loadProducts() {
    try {
      const res = await fetch("/api/products", {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m");

      const response = await res.json();
      const products = response.data; // D·ªØ li·ªáu s·∫£n ph·∫©m
      const categories = [...new Set(products.map((product) => product.category))]; // L·∫•y danh m·ª•c duy nh·∫•t

      // Hi·ªÉn th·ªã danh m·ª•c trong modal
      const categorySelect = document.getElementById("product-category");
      categorySelect.innerHTML = '<option value="">Ch·ªçn danh m·ª•c</option>';
      categories.forEach((category) => {
        const option = document.createElement("option");
        option.value = category;
        option.textContent = category;
        categorySelect.appendChild(option);
      });

      // Hi·ªÉn th·ªã s·∫£n ph·∫©m trong b·∫£ng
      if (productTableBody) {
        productTableBody.innerHTML = "";
        products.forEach((product) => {
          const discountedPrice =
            (product.price_origin || 0) * (1 - (product.sale || 0) / 100);

          const tr = document.createElement("tr");
          tr.innerHTML = `
            <td><img src="${product.image_bg}" width="50" alt="H√¨nh ·∫£nh s·∫£n ph·∫©m"/></td>
            <td>${product.title}</td>
            <td>${product.category}</td>
            <td>${formatCurrency(product.price_origin)}</td>
            <td>${product.sale}%</td>
            <td>${formatCurrency(discountedPrice)}</td>
            <td>
              <button class="edit-btn" data-id="${product._id}">‚úèÔ∏è</button>
              <button class="delete-btn" data-id="${product._id}">üóëÔ∏è</button>
            </td>
          `;
          productTableBody.appendChild(tr);
        });

        document
          .querySelectorAll(".edit-btn")
          .forEach((btn) =>
            btn.addEventListener("click", () => editProduct(btn.dataset.id))
          );
        document
          .querySelectorAll(".delete-btn")
          .forEach((btn) =>
            btn.addEventListener("click", () => deleteProduct(btn.dataset.id))
          );
      } else {
        console.error("Kh√¥ng t√¨m th·∫•y b·∫£ng s·∫£n ph·∫©m trong DOM");
      }
    } catch (err) {
      console.error(err);
    }
  }

  // Ch·ªânh s·ª≠a s·∫£n ph·∫©m
  async function editProduct(id) {
    try {
      const res = await fetch(`/api/products/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
  
      if (!res.ok) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin s·∫£n ph·∫©m");
  
      const response = await res.json();
      const product = response.data;
  
      if (productForm) {
        productForm["product-name"].value = product.title || "";
        productForm["product-price"].value = product.price_origin || 0;
        if (productForm["product-sale"]) {
          productForm["product-sale"].value = product.sale || 0;
        }
        productForm["product-category"].value = product.category || ""; // G√°n danh m·ª•c
        productForm["product-description"].value = product.description_product || "";
        productForm["product-image-bg"].value = product.image_bg || "";
  
        isEditing = true; // ƒê·∫∑t tr·∫°ng th√°i ch·ªânh s·ª≠a
        editingProductId = product._id; // G√°n ID s·∫£n ph·∫©m ƒëang ch·ªânh s·ª≠a
        formTitle.textContent = "Ch·ªânh s·ª≠a s·∫£n ph·∫©m";
        submitBtn.textContent = "C·∫≠p nh·∫≠t";
  
        // Hi·ªÉn th·ªã modal
        showAddProductModal();
      }
    } catch (err) {
      console.error(err);
      alert(`L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m: ${err.message}`);
    }
  }

  // X√≥a s·∫£n ph·∫©m
  async function deleteProduct(id) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) return;

    try {
      const res = await fetch(`/api/admin/products/${id}`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m");

      alert("ƒê√£ x√≥a s·∫£n ph·∫©m.");
      loadProducts();
    } catch (err) {
      console.error(err);
      alert(`L·ªói khi x√≥a s·∫£n ph·∫©m: ${err.message}`);
    }
  }

  // ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá
  function formatCurrency(amount) {
    if (isNaN(amount)) amount = 0;
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(amount);
  }

  // ƒê∆∞a h√†m ra ph·∫°m vi to√†n c·ª•c
  window.showAddProductModal = function () {
    const modal = document.getElementById("product-modal");
    if (modal) {
      modal.style.display = "block"; // Hi·ªÉn th·ªã modal
      formTitle.textContent = "Th√™m s·∫£n ph·∫©m m·ªõi"; // ƒê·∫∑t ti√™u ƒë·ªÅ modal
      productForm.reset(); // Reset form ƒë·ªÉ x√≥a d·ªØ li·ªáu c≈©
      isEditing = false; // ƒê·∫∑t tr·∫°ng th√°i kh√¥ng ph·∫£i ch·ªânh s·ª≠a
      submitBtn.textContent = "Th√™m"; // ƒê·∫∑t n√∫t th√†nh "Th√™m"
    }
  };

  // ƒê√≥ng modal
  window.closeModal = function () {
    const modal = document.getElementById("product-modal");
    if (modal) {
      modal.style.display = "none"; // ·∫®n modal
      productForm.reset(); // Reset form khi ƒë√≥ng modal
      isEditing = false; // Reset tr·∫°ng th√°i ch·ªânh s·ª≠a
      editingProductId = null;
      formTitle.textContent = "Th√™m s·∫£n ph·∫©m";
      submitBtn.textContent = "Th√™m";
    }
  };
});